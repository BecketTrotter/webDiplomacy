I will edit this file whenever new things are discovered.
And will be destroyed once refactoring is done.

What's happening on the board

    There are 5 essential data to generate a game board. These datas come from api calls.(Territories is static data but can be fetched from DB)
    I've added interfaces for these. Please check for better understanding.

        Territories => Static data of territories.

        Units => Data of all units in the current game. This includes id, terrID(id of the territory it belongs to), countryID(who it belongs to), and type(Fleet | Army)

        TerrStatus => Data of all territories of the current board. This is dynamic. I found that they have 3 territories that have 2 coasts within them(Spain, Bulgaria, ST. Petersburg)
                        These coasts will be processed client side. so the TerrStatus coming from request will not contain them(75 territories from Terrstatus vs 81 from Territories)
                        I think we can change this but it requires DB changes.
        
        context => Game related data including gameID, variantID(game mode), current userID, memberID, current turn, current phase, current users countryID, order status

        ordersData => Saved orders data for current turn.  ## will be working on this later ##



Once the board is generated with above data, valid orders will be generated ## Not sure about this. It maybe not be pre-calculated. I will check when I start working on order.js ##

Most of the methods you can find within model.js file is for order validation. Either to get data from the board or to process the data to return valid order options.

Some methods are used to dynamically add properties to the Object. My plan is to remove these and add those properties when the new Class instance is created.

Basically, any setter methods will be removed and will be added to the Object(Board, Unit or Territory. ##possibly ConvoyGroup as well##) at instantiation.
    => this includes all the methods that set data in cache. (i.e getBorderTerritories() from model.js line 56)
        => Right now, these methods get called when order generation/validation is happening and save the value in cache for reuse. I believe we can do this up front when we create a board since we can safely assume all the orders must be visited before submitted.

All the getter methods related to order generation/validation will live in the Board class.
    => Now, these methods are distributed. I think we can combine them and have it in a Board since they require access to multiple units and territories which live in Board.

Orders 

    Will be treated separately from the board. We can assume any incoming orders data from the server(saved or finished) are validated. So this will be used for view only.
    We may have a model for this as well but since this will be dynamic, not sure if it's a good way to do it.

Steps to generate order
    if user has saved/finished orders, we can load them.

    if not
        1. User clicks on a single unit
        2. returns default moves(move, hold, support move and support hold) ## I don't think they validate these. seems like it always have these 4 options. will check ##
        3. User clicks on one of the moves
        4. Calls the order generation methods with params(clicked Unit and move)
        5. returns valid options.