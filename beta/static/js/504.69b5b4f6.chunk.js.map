{"version":3,"file":"static/js/504.69b5b4f6.chunk.js","mappings":"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","sources":["components/map/components/WDTrigger.tsx","components/map/components/WDCenter.tsx","components/map/components/WDLabel.tsx","enums/ArrowType.ts","components/map/components/WDProvince.tsx","components/map/components/WDProvinceBorderHighlight.tsx","components/map/components/WDUnitSlot.tsx","components/map/components/WDProvinceOverlay.tsx","components/map/variants/classic/components/WDBoardMap.tsx","enums/BuildUnit.ts","utils/map/WDArrowMarkerDefs.tsx","data/BuildUnit.ts","components/map/components/WDBuildUnitButtons.tsx","components/map/components/WDBuildContainer.tsx","components/map/components/WDFlyoutButton.tsx","components/map/components/WDFlyoutContainer.tsx","utils/map/drawArrowFunctional.tsx","utils/map/arrowDispatchReceiveCoordinates.ts","components/map/components/WDArrowContainer.tsx","components/map/WDMap.tsx","components/controllers/WDMapController.tsx","utils/map/getInitialViewTranslation.ts"],"sourcesContent":["import * as React from \"react\";\n\nconst WDTrigger: React.FC = function (): React.ReactElement {\n  return (\n    <rect\n      className=\"trigger\"\n      height=\"100%\"\n      width=\"100%\"\n      fill=\"black\"\n      style={{ opacity: 0 }}\n    />\n  );\n};\n\nexport default WDTrigger;\n","import { useTheme } from \"@mui/material\";\nimport * as React from \"react\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport { Coordinates } from \"../../../interfaces\";\nimport WDTrigger from \"./WDTrigger\";\n\ninterface WDCenterProps extends Coordinates {\n  province: Province;\n}\n\nconst WDCenter: React.FC<WDCenterProps> = function ({\n  province,\n  x,\n  y,\n}): React.ReactElement {\n  const theme = useTheme();\n  return (\n    <svg\n      id={`${province}-center`}\n      width=\"34\"\n      height=\"34\"\n      viewBox=\"0 0 34 34\"\n      fill=\"none\"\n      x={x}\n      y={y}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path\n        d=\"M17 32.9998C25.8366 32.9998 33 25.8364 33 16.9999C33 8.1634 25.8366 1 17 1C8.16344 1 1 8.1634 1 16.9999C1 25.8364 8.16344 32.9998 17 32.9998Z\"\n        stroke={theme.palette.primary.main}\n      />\n      <path\n        d=\"M17.0064 25.7269C21.8263 25.7269 25.7336 21.8196 25.7336 16.9997C25.7336 12.1797 21.8263 8.27243 17.0064 8.27243C12.1866 8.27243 8.2793 12.1797 8.2793 16.9997C8.2793 21.8196 12.1866 25.7269 17.0064 25.7269Z\"\n        fill={theme.palette.primary.main}\n      />\n      <WDTrigger />\n    </svg>\n  );\n};\n\nexport default WDCenter;\n","import { useTheme } from \"@mui/material\";\nimport * as React from \"react\";\nimport { Label } from \"../../../interfaces\";\n\ninterface WDLabelProps extends Label {\n  id?: string;\n}\n\nconst WDLabel: React.FC<WDLabelProps> = function ({\n  id,\n  style,\n  text,\n  x,\n  y,\n}): React.ReactElement {\n  const theme = useTheme();\n  return (\n    <text\n      key={id}\n      className=\"label\"\n      style={{\n        fill: theme.palette.primary.main,\n        fontWeight: 900,\n        fontSize: \"150%\",\n        userSelect: \"none\",\n        ...style,\n      }}\n      x={x}\n      y={y}\n      id={id}\n    >\n      {text}\n    </text>\n  );\n};\n\nWDLabel.defaultProps = {\n  id: undefined,\n};\n\nexport default WDLabel;\n","enum ArrowType {\n  CONVOY,\n  MOVE,\n  SUPPORT,\n  HOLD,\n}\n\nexport default ArrowType;\n","import { useTheme } from \"@mui/material\";\nimport * as React from \"react\";\nimport countryMap from \"../../../data/map/variants/classic/CountryMap\";\nimport { ProvinceMapData } from \"../../../interfaces\";\nimport {\n  gameApiSliceActions,\n  gameMaps,\n  gameOverview,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport ClickObjectType from \"../../../types/state/ClickObjectType\";\nimport WDCenter from \"./WDCenter\";\nimport WDLabel from \"./WDLabel\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\n\ninterface WDProvinceProps {\n  provinceMapData: ProvinceMapData;\n  ownerCountryID: string | undefined;\n  playerCountryID: number | undefined;\n  highlightSelection: boolean;\n}\n\nconst WDProvince: React.FC<WDProvinceProps> = function ({\n  provinceMapData,\n  ownerCountryID,\n  playerCountryID,\n  highlightSelection,\n}): React.ReactElement {\n  const theme = useTheme();\n  const dispatch = useAppDispatch();\n\n  const { user, members } = useAppSelector(gameOverview);\n\n  const { province } = provinceMapData;\n  let territoryFill = \"none\";\n  let territoryFillOpacity = 0;\n  const territoryStrokeOpacity = 1;\n\n  // Normally, color according to supply center ownership\n  if (ownerCountryID) {\n    const ownerCountry = members.find(\n      (m) => m.countryID === Number(ownerCountryID),\n    )?.country;\n    if (ownerCountry && provinceMapData.type !== \"Sea\") {\n      territoryFill = theme.palette[ownerCountry]?.main;\n      territoryFillOpacity = 0.4;\n    }\n  }\n\n  // If highlighting a selection, color according to the active player's\n  // color, and more opaque.\n  if (highlightSelection && playerCountryID) {\n    const playerCountry = members.find(\n      (m) => m.countryID === playerCountryID,\n    )?.country;\n    if (playerCountry) {\n      territoryFill = theme.palette[playerCountry]?.main;\n      territoryFillOpacity = 1.0;\n    }\n  }\n\n  const clickAction = function (\n    evt: React.MouseEvent<SVGGElement, MouseEvent>,\n  ) {\n    dispatch(\n      gameApiSliceActions.processMapClick({\n        evt,\n        clickProvince: province,\n      }),\n    );\n  };\n  return (\n    <svg\n      height={provinceMapData.height}\n      id={`${province}-province`}\n      viewBox={provinceMapData.viewBox}\n      width={provinceMapData.width}\n      x={provinceMapData.x}\n      y={provinceMapData.y}\n    >\n      <g onClick={(e) => clickAction(e)}>\n        {provinceMapData.texture?.texture && (\n          <path\n            d={provinceMapData.path}\n            fill={provinceMapData.texture.texture}\n            id={`${province}-texture`}\n            stroke={provinceMapData.texture.stroke}\n            strokeOpacity={provinceMapData.texture.strokeOpacity}\n            strokeWidth={provinceMapData.texture.strokeWidth}\n          />\n        )}\n        <path\n          d={provinceMapData.path}\n          fill={territoryFill}\n          fillOpacity={territoryFillOpacity}\n          id={`${province}-control-path`}\n          stroke={theme.palette.primary.main}\n          strokeOpacity={1}\n          strokeWidth={territoryStrokeOpacity}\n        />\n      </g>\n      {provinceMapData.centerPos && (\n        <g className=\"no-pointer-events\">\n          <WDCenter\n            province={province}\n            x={provinceMapData.centerPos.x}\n            y={provinceMapData.centerPos.y}\n          />\n        </g>\n      )}\n      {provinceMapData.labels &&\n        provinceMapData.labels.map(({ name, text, style, x, y }, i) => {\n          let txt = text;\n          const id = `${province}-label-${name}`;\n          if (!txt) {\n            txt = provinceMapData.abbr;\n          }\n          return (\n            <g key={id} className=\"no-pointer-events\">\n              <WDLabel\n                id={id}\n                name={name}\n                key={id || i}\n                style={style}\n                text={txt}\n                x={x}\n                y={y}\n              />\n            </g>\n          );\n        })}\n    </svg>\n  );\n};\n\nexport default WDProvince;\n","import * as React from \"react\";\nimport { ProvinceMapData } from \"../../../interfaces\";\n\ninterface WDProvinceBorderHighlightProps {\n  provinceMapData: ProvinceMapData;\n}\n\nconst WDProvinceBorderHighlight: React.FC<WDProvinceBorderHighlightProps> =\n  function ({ provinceMapData }): React.ReactElement {\n    const { province } = provinceMapData;\n\n    return (\n      <svg\n        height={provinceMapData.height}\n        id={`${province}-province-overlay`}\n        viewBox={provinceMapData.viewBox}\n        width={provinceMapData.width}\n        x={provinceMapData.x}\n        y={provinceMapData.y}\n        overflow=\"visible\"\n      >\n        <path\n          d={provinceMapData.path}\n          fill=\"none\"\n          fillOpacity={0.0}\n          id={`${province}-choice-outline`}\n          stroke=\"black\"\n          strokeOpacity={1}\n          strokeWidth={5}\n        />\n      </svg>\n    );\n  };\n\nexport default WDProvinceBorderHighlight;\n","import * as React from \"react\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\nimport { Coordinates } from \"../../../interfaces\";\n\ninterface WDUnitSlotProps extends Coordinates {\n  name: string;\n}\n\nconst WDUnitSlot: React.FC<WDUnitSlotProps> = function ({\n  children,\n  name,\n  x,\n  y,\n}): React.ReactElement {\n  return (\n    <svg\n      className=\"unit-slot\"\n      id={`${name}-unit-slot`}\n      style={{ overflow: \"visible\" }}\n      x={x}\n      y={y}\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport default WDUnitSlot;\n","import * as React from \"react\";\nimport UIState from \"../../../enums/UIState\";\nimport { ProvinceMapData } from \"../../../interfaces\";\nimport UnitType from \"../../../types/UnitType\";\nimport WDUnit from \"../../ui/units/WDUnit\";\nimport WDUnitSlot from \"./WDUnitSlot\";\nimport { Unit, UnitDrawMode } from \"../../../utils/map/getUnits\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\n\ninterface WDProvinceOverlayProps {\n  provinceMapData: ProvinceMapData;\n  units: Unit[];\n}\n\nconst WDProvinceOverlay: React.FC<WDProvinceOverlayProps> = function ({\n  provinceMapData,\n  units,\n}): React.ReactElement {\n  const { province } = provinceMapData;\n\n  // Maps unitSlot name -> unit to draw.\n  const unitFCs: { [key: string]: React.ReactElement } = {};\n  // Maps unitSlot name -> unit to draw, but specifically for units\n  // that are currently disloging another unit on a retreat phase.\n  // This is separate because we need to draw the\n  // dislodger unit in an alternative location when there are two\n  // units in a territory so that they don't overlap each other, including\n  // when those units share the same unitSlot within that territory.\n  const unitFCsDislodging: { [key: string]: React.ReactElement } = {};\n\n  units\n    .filter((unit) => unit.mappedTerritory.province === province)\n    .forEach((unit) => {\n      let unitState: UIState;\n      switch (unit.drawMode) {\n        case UnitDrawMode.NONE:\n          unitState = UIState.NONE;\n          break;\n        case UnitDrawMode.HOLD:\n          unitState = UIState.HOLD;\n          break;\n        case UnitDrawMode.BUILD:\n          // This state of drawing the unit reduces constrast on the unit and isn't necessary\n          // now that we have green build circles highlighting the new builds.\n          // unitState = UIState.BUILD;\n          unitState = UIState.NONE;\n          break;\n        case UnitDrawMode.DISLODGING:\n          unitState = UIState.NONE;\n          break;\n        case UnitDrawMode.DISLODGED:\n          unitState = UIState.DISLODGED;\n          break;\n        case UnitDrawMode.DISBANDED:\n          unitState = UIState.DISBANDED;\n          break;\n        default:\n          unitState = UIState.NONE;\n          break;\n      }\n      const wdUnit = (\n        <WDUnit\n          id={`${province}-unit`}\n          country={unit.country}\n          meta={unit}\n          type={unit.unit.type as UnitType}\n          iconState={unitState}\n        />\n      );\n      if (unit.drawMode === UnitDrawMode.DISLODGING) {\n        unitFCsDislodging[unit.mappedTerritory.unitSlotName] = wdUnit;\n      } else {\n        unitFCs[unit.mappedTerritory.unitSlotName] = wdUnit;\n      }\n    });\n\n  return (\n    <svg\n      height={provinceMapData.height}\n      id={`${province}-province-overlay`}\n      viewBox={provinceMapData.viewBox}\n      width={provinceMapData.width}\n      x={provinceMapData.x}\n      y={provinceMapData.y}\n      overflow=\"visible\"\n    >\n      {provinceMapData.unitSlots\n        .filter(({ name }) => name in unitFCs)\n        .map(({ name, x, y }) => (\n          <WDUnitSlot key={name} name={name} x={x} y={y}>\n            {unitFCs[name]}\n          </WDUnitSlot>\n        ))}\n      {provinceMapData.unitSlots\n        .filter(({ name }) => name in unitFCsDislodging)\n        .map(({ name, arrowReceiver }) => {\n          const unitName = `${name}-dislodging`;\n          // For dislodger units, we draw them at the location of the\n          // arrow receiver.\n          return (\n            <WDUnitSlot\n              key={unitName}\n              name={unitName}\n              x={arrowReceiver.x}\n              y={arrowReceiver.y}\n            >\n              {unitFCsDislodging[name]}\n            </WDUnitSlot>\n          );\n        })}\n    </svg>\n  );\n};\n\nexport default WDProvinceOverlay;\n","import * as React from \"react\";\nimport WDProvince from \"../../../components/WDProvince\";\nimport WDProvinceBorderHighlight from \"../../../components/WDProvinceBorderHighlight\";\nimport WDProvinceOverlay from \"../../../components/WDProvinceOverlay\";\nimport { Unit } from \"../../../../../utils/map/getUnits\";\nimport provincesMapData from \"../../../../../data/map/ProvincesMapData\";\nimport Province from \"../../../../../enums/map/variants/classic/Province\";\nimport {\n  gameData,\n  gameLegalOrders,\n  gameMaps,\n  gameOrder,\n  gameOverview,\n} from \"../../../../../state/game/game-api-slice\";\nimport { useAppSelector } from \"../../../../../state/hooks\";\nimport { IProvinceStatus } from \"../../../../../models/Interfaces\";\nimport OrderState from \"../../../../../state/interfaces/OrderState\";\nimport { LegalOrders } from \"../../../../../utils/state/gameApiSlice/extraReducers/fetchGameData/precomputeLegalOrders\";\nimport TerritoryMap from \"../../../../../data/map/variants/classic/TerritoryMap\";\nimport countryMap from \"../../../../../data/map/variants/classic/CountryMap\";\n\ninterface WDBoardMapProps {\n  units: Unit[];\n  centersByProvince: { [key: string]: { ownerCountryID: string } };\n  phase: string;\n  isLivePhase: boolean; // Game is live and user is viewing the latest phase?\n}\n\nconst WDBoardMap: React.FC<WDBoardMapProps> = function ({\n  units,\n  centersByProvince,\n  phase,\n  isLivePhase,\n}): React.ReactElement {\n  const gameDataResponse = useAppSelector(gameData);\n  const maps = useAppSelector(gameMaps);\n  const provinceStatusByProvID: { [key: string]: IProvinceStatus } = {};\n  gameDataResponse.data.territoryStatuses.forEach((provinceStatus) => {\n    provinceStatusByProvID[maps.terrIDToProvince[provinceStatus.id]] =\n      provinceStatus;\n  });\n\n  const curOrder: OrderState = useAppSelector(gameOrder);\n  const legalOrders: LegalOrders = useAppSelector(gameLegalOrders);\n\n  const overview = useAppSelector(gameOverview);\n  const { members, user } = overview;\n\n  let provincesToHighlight: Province[] = [];\n  let provincesToChoose: Province[] = [];\n  if (isLivePhase && user) {\n    if (phase === \"Diplomacy\") {\n      if (!curOrder.inProgress) {\n        provincesToHighlight = [];\n        provincesToChoose = [];\n      } else if (curOrder.type === \"Move\") {\n        if (curOrder.viaConvoy) {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = legalOrders.legalViasByUnitID[\n            curOrder.unitID\n          ].map((via) => TerritoryMap[via.dest].province);\n        } else {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = legalOrders.legalMoveDestsByUnitID[\n            curOrder.unitID\n          ].map((territory) => TerritoryMap[territory].province);\n        }\n      } else if (curOrder.type === \"Support\") {\n        if (curOrder.fromTerrID) {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n            maps.terrIDToProvince[curOrder.fromTerrID],\n          ];\n          provincesToChoose = legalOrders.legalSupportsByUnitID[\n            curOrder.unitID\n          ][maps.terrIDToProvince[curOrder.fromTerrID]].map(\n            (support) => support.dest,\n          );\n        } else {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = Object.keys(\n            legalOrders.legalSupportsByUnitID[curOrder.unitID],\n          ) as Province[];\n        }\n      } else if (curOrder.type === \"Convoy\") {\n        if (curOrder.fromTerrID) {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n            maps.terrIDToProvince[curOrder.fromTerrID],\n          ];\n          provincesToChoose = Object.keys(\n            legalOrders.legalConvoysByUnitID[curOrder.unitID][\n              maps.terrIDToProvince[curOrder.fromTerrID]\n            ],\n          ) as Province[];\n        } else {\n          provincesToHighlight = [\n            maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n          ];\n          provincesToChoose = Object.keys(\n            legalOrders.legalConvoysByUnitID[curOrder.unitID],\n          ) as Province[];\n        }\n      }\n    } else if (phase === \"Retreats\") {\n      if (!curOrder.inProgress) {\n        provincesToHighlight = [];\n        provincesToChoose = Object.keys(\n          legalOrders.legalRetreatDestsByUnitID,\n        ).map((unitID) => maps.terrIDToProvince[maps.unitToTerrID[unitID]]);\n      } else if (curOrder.type === \"Retreat\") {\n        provincesToHighlight = [\n          maps.terrIDToProvince[maps.unitToTerrID[curOrder.unitID]],\n        ];\n        provincesToChoose = legalOrders.legalRetreatDestsByUnitID[\n          curOrder.unitID\n        ].map((territory) => TerritoryMap[territory].province);\n        provincesToChoose.push(provincesToHighlight[0]);\n      }\n    } else if (phase === \"Builds\") {\n      if (user.member.supplyCenterNo < user.member.unitNo) {\n        provincesToChoose = units\n          .filter((unit) => unit.country === user.member.country)\n          .map((unit) => unit.mappedTerritory.province);\n      } else if (user.member.supplyCenterNo > user.member.unitNo) {\n        provincesToChoose = legalOrders.possibleBuildDests.map(\n          (territory) => TerritoryMap[territory].province,\n        );\n      }\n    }\n  }\n  const provincesToHighlightSet = new Set(provincesToHighlight);\n  const provincesToChooseSet = new Set(provincesToChoose);\n  // console.log({ provincesToChooseSet });\n\n  const unplayableProvinces = Object.values(provincesMapData)\n    .filter((data) => !data.playable)\n    .map((data) => {\n      return (\n        <WDProvince\n          provinceMapData={data}\n          ownerCountryID={centersByProvince[data.province]?.ownerCountryID}\n          playerCountryID={user?.member.countryID}\n          highlightSelection={false}\n          key={`${data.province}-province`}\n        />\n      );\n    });\n  // Hack - Rome and Naples need to be sorted to the end or else their label will get cut\n  // off by neighboring territories drawn on top of it.\n  const playableProvincesData = Object.values(provincesMapData).filter(\n    (data) =>\n      data.playable &&\n      data.province !== Province.NAPLES &&\n      data.province !== Province.ROME,\n  );\n  playableProvincesData.push(provincesMapData[Province.NAPLES]);\n  playableProvincesData.push(provincesMapData[Province.ROME]);\n\n  const playableProvinces = playableProvincesData.map((data) => {\n    const highlightSelection = provincesToHighlightSet.has(data.province);\n    return (\n      <WDProvince\n        provinceMapData={data}\n        ownerCountryID={centersByProvince[data.province]?.ownerCountryID}\n        playerCountryID={user?.member.countryID}\n        highlightSelection={highlightSelection}\n        key={`${data.province}-province`}\n      />\n    );\n  });\n\n  const playableProvinceBorderHighlights = playableProvincesData\n    .filter((data) => provincesToChooseSet.has(data.province))\n    .map((data) => {\n      return (\n        <WDProvinceBorderHighlight\n          provinceMapData={data}\n          key={`${data.province}-province-border-highlight`}\n        />\n      );\n    });\n\n  const playableProvinceOverlays = playableProvincesData.map((data) => {\n    return (\n      <WDProvinceOverlay\n        provinceMapData={data}\n        units={units}\n        key={`${data.province}-province-overlay`}\n      />\n    );\n  });\n\n  return (\n    <g id=\"wD-boardmap-v10.3.4 1\">\n      <g id=\"unplayable\">{unplayableProvinces}</g>\n      <g id=\"playableProvinces\">{playableProvinces}</g>\n      <g id=\"playableProvinceBorderHighlights\">\n        {playableProvinceBorderHighlights}\n      </g>\n      <g id=\"playableProvinceOverlays\">{playableProvinceOverlays}</g>\n    </g>\n  );\n};\n\nexport default WDBoardMap;\n","/* eslint-disable no-bitwise */\n\nenum BuildUnit {\n  Army = 1 << 1,\n  Fleet = 1 << 2,\n  All = Army | Fleet,\n}\n\nexport default BuildUnit;\n","import * as React from \"react\";\nimport ArrowColor from \"../../enums/ArrowColor\";\nimport ArrowType from \"../../enums/ArrowType\";\nimport webDiplomacyTheme from \"../../webDiplomacyTheme\";\n\nconst WDArrowMarkerColors = function (\n  arrowType: ArrowType,\n): React.ReactElement {\n  switch (arrowType) {\n    case ArrowType.SUPPORT:\n      return (\n        <>\n          {Object.entries(webDiplomacyTheme.palette.arrowColors).map(\n            ([arrowColor, config]) => (\n              <marker\n                id={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                key={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                markerWidth={12}\n                markerHeight={8}\n                refX={18}\n                refY={3}\n                orient=\"auto\"\n              >\n                <polygon\n                  points=\"0 0, 6 3, 0 6, 0 5, 4 3, 0 1\"\n                  fill={config.main}\n                />\n                <polygon\n                  points=\"4 0, 10 3, 4 6, 4 5, 8 3, 4 1\"\n                  fill={config.main}\n                />\n              </marker>\n            ),\n          )}\n        </>\n      );\n    case ArrowType.HOLD:\n      return (\n        <>\n          {Object.entries(webDiplomacyTheme.palette.arrowColors).map(\n            ([arrowColor, config]) => (\n              <marker\n                id={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                key={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                markerWidth={90}\n                markerHeight={90}\n                refX={10}\n                refY={45}\n                orient=\"auto\"\n                markerUnits=\"userSpaceOnUse\"\n                strokeWidth={4}\n              >\n                <path d=\" M 24 72 A 30 30 180 0 1 24 18\" stroke={config.main} />\n              </marker>\n            ),\n          )}\n        </>\n      );\n    default:\n      return (\n        <>\n          {Object.entries(webDiplomacyTheme.palette.arrowColors).map(\n            ([arrowColor, config]) => (\n              <marker\n                id={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                key={`arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]}`}\n                markerWidth={8}\n                markerHeight={8}\n                refX={\n                  (arrowColor as unknown as number) ===\n                  ArrowColor.IMPLIED_FOREIGN\n                    ? 0\n                    : 7.1\n                }\n                refY={4}\n                orient=\"auto\"\n              >\n                <polygon points=\"0 0, 8 4, 0 8\" fill={config.main} />\n              </marker>\n            ),\n          )}\n        </>\n      );\n  }\n};\n\nconst WDArrowMarkerDefs = function (): React.ReactElement {\n  return (\n    <>\n      {WDArrowMarkerColors(ArrowType.HOLD)}\n      {WDArrowMarkerColors(ArrowType.MOVE)}\n      {WDArrowMarkerColors(ArrowType.SUPPORT)}\n    </>\n  );\n};\n\nexport default WDArrowMarkerDefs;\n","import BuildUnit from \"../enums/BuildUnit\";\n\nexport const BuildUnitTypeMap = {\n  Army: BuildUnit.Army,\n  Fleet: BuildUnit.Fleet,\n  [BuildUnit.Army]: \"Army\",\n  [BuildUnit.Fleet]: \"Fleet\",\n} as const;\n\nconst BuildUnitMap = {\n  [BuildUnit.Army]: \"Build Army\",\n  [BuildUnit.Fleet]: \"Build Fleet\",\n  \"Build Army\": BuildUnit.Army,\n  \"Build Fleet\": BuildUnit.Fleet,\n} as const;\n\nexport default BuildUnitMap;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\nimport BuildUnit from \"../../../enums/BuildUnit\";\nimport Country from \"../../../enums/Country\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport UIState from \"../../../enums/UIState\";\nimport WDArmyIcon from \"../../ui/units/WDArmyIcon\";\nimport WDFleetIcon from \"../../ui/units/WDFleetIcon\";\n\nexport interface BuildData {\n  availableOrder: string;\n  clickCallback: (\n    availableOrder: BuildData[\"availableOrder\"],\n    canBuild: BuildData[\"canBuild\"],\n    toTerrID: BuildData[\"toTerrID\"],\n  ) => void;\n  country: Country;\n  canBuild: BuildUnit;\n  province: Province;\n  unitSlotName: string;\n  toTerrID: string;\n}\n\nconst WDBuildUnitButtons: React.FC<BuildData> = function ({\n  availableOrder,\n  clickCallback,\n  country,\n  canBuild,\n  province,\n  unitSlotName,\n  toTerrID,\n}): React.ReactElement {\n  const provinceMapData = provincesMapData[province];\n  let svgX =\n    provinceMapData.x + provinceMapData.unitSlotsBySlotName[unitSlotName].x;\n  let svgY =\n    provinceMapData.y + provinceMapData.unitSlotsBySlotName[unitSlotName].y;\n\n  let rw = 70;\n  const rh = 70;\n  const rBorder = 10;\n  const rFill = \"rgba(0,0,0,.7)\";\n  const buildButtons: React.ReactElement[] = [];\n  const iconStyle: React.CSSProperties = {\n    width: 50,\n    height: 50,\n  };\n  const groupStyle: React.CSSProperties = {\n    cursor: \"pointer\",\n  };\n\n  const cx = 0 + rw / 2;\n  const cy = 0 + rh / 2;\n  const r = 25;\n  const iconX = cx - r;\n  const iconY = cy - r;\n  svgY -= rh;\n  if (canBuild & BuildUnit.Army) {\n    buildButtons.push(\n      <g\n        key=\"Army\"\n        style={groupStyle}\n        onClick={() => {\n          clickCallback(availableOrder, BuildUnit.Army, toTerrID);\n        }}\n      >\n        <circle fill=\"white\" r={r} cx={cx} cy={cy} />\n        <svg x={iconX} y={iconY} style={iconStyle}>\n          <WDArmyIcon country={country} iconState={UIState.BUILD} />\n        </svg>\n      </g>,\n    );\n  }\n  if (canBuild & BuildUnit.Fleet) {\n    let shift = 0;\n    if (buildButtons.length) {\n      shift = rw - rBorder;\n      rw = rw * 2 - rBorder;\n    }\n    buildButtons.push(\n      <g\n        key=\"Fleet\"\n        style={groupStyle}\n        onClick={() => {\n          clickCallback(availableOrder, BuildUnit.Fleet, toTerrID);\n        }}\n      >\n        <circle fill=\"white\" r={r} cx={cx + shift} cy={cy} />\n        <svg x={iconX + shift} y={iconY} style={iconStyle}>\n          <WDFleetIcon country={country} iconState={UIState.BUILD} />\n        </svg>\n      </g>,\n    );\n  }\n  svgX -= rw / 2;\n  return (\n    <svg x={svgX} y={svgY}>\n      <rect\n        x={0}\n        y={0}\n        fill={rFill}\n        width={rw}\n        height={rh}\n        rx={rBorder}\n        ry={rBorder}\n      />\n      {buildButtons}\n    </svg>\n  );\n};\n\nexport default WDBuildUnitButtons;\n","/* eslint-disable no-bitwise */\nimport { Box } from \"@mui/material\";\nimport * as React from \"react\";\nimport BuildUnitMap from \"../../../data/BuildUnit\";\nimport countryMap from \"../../../data/map/variants/classic/CountryMap\";\nimport BuildUnit from \"../../../enums/BuildUnit\";\nimport {\n  gameApiSliceActions,\n  gameOrder,\n  gameTerritoriesMeta,\n  gameMaps,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport WDBuildUnitButtons from \"./WDBuildUnitButtons\";\nimport { TerritoryMeta } from \"../../../state/interfaces/TerritoriesState\";\nimport TerritoryMap from \"../../../data/map/variants/classic/TerritoryMap\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\n\nconst WDBuildContainer: React.FC = function (): React.ReactElement {\n  const dispatch = useAppDispatch();\n  const maps = useAppSelector(gameMaps);\n\n  const build = (availableOrder, canBuild, toTerrID) => {\n    // console.log(\n    //   `Dispatched a build ${canBuild} ${BuildUnitMap[canBuild]} ${toTerrID}`,\n    // );\n    let terrIDToBuildOn = toTerrID;\n    if (BuildUnitMap[canBuild] === \"Build Army\") {\n      // If we initiated a build popup onto a special coast but the user\n      // chose to build an army, make sure the army gets built on the province\n      // root territory rather than a special coast.\n      terrIDToBuildOn = maps.terrIDToProvinceID[toTerrID];\n    }\n    dispatch(\n      gameApiSliceActions.updateOrdersMeta({\n        [availableOrder]: {\n          saved: false,\n          update: {\n            type: BuildUnitMap[canBuild],\n            toTerrID: terrIDToBuildOn,\n          },\n        },\n      }),\n    );\n    dispatch(gameApiSliceActions.resetOrder());\n  };\n  const order = useAppSelector(gameOrder);\n  const userMember = useAppSelector(\n    (state) => state.game.overview.user!.member,\n  );\n  if (!order || order.type !== \"Build\") {\n    return <Box />;\n  }\n  const territory = maps.terrIDToTerritory[order.toTerrID];\n  const { province, unitSlotName } = TerritoryMap[territory];\n  const canBuild =\n    provincesMapData[province].type === \"Coast\"\n      ? BuildUnit.All\n      : BuildUnit.Army;\n  return (\n    <WDBuildUnitButtons\n      key={`${province}-${unitSlotName}`}\n      availableOrder={order.orderID}\n      canBuild={canBuild}\n      clickCallback={build}\n      country={countryMap[userMember.country]}\n      province={province}\n      unitSlotName={unitSlotName}\n      toTerrID={order.toTerrID}\n    />\n  );\n};\n\nexport default WDBuildContainer;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport { Box, Button, Stack } from \"@mui/material\";\nimport {\n  gameApiSliceActions,\n  gameOrder,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport WDBuildUnitButtons from \"./WDBuildUnitButtons\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\n\ntype Position = \"left\" | \"right\" | \"top\" | \"bottom\";\n\ninterface WDOrderTypeButtonProps {\n  province: Province;\n  unitSlotName: string;\n  position: Position;\n  text: string;\n  clickHandler: () => void;\n}\n\nconst WDFlyoutButton: React.FC<WDOrderTypeButtonProps> = function ({\n  province,\n  unitSlotName,\n  position,\n  text,\n  clickHandler,\n}): React.ReactElement {\n  const dispatch = useAppDispatch();\n  const provinceMapData = provincesMapData[province];\n  if (!provinceMapData || !provinceMapData.unitSlotsBySlotName[unitSlotName])\n    return <Box />;\n\n  const unitX =\n    provinceMapData.x + provinceMapData.unitSlotsBySlotName[unitSlotName].x;\n  const unitY =\n    provinceMapData.y + provinceMapData.unitSlotsBySlotName[unitSlotName].y;\n\n  const fontSize = 28;\n  const rw = 55 + fontSize * text.length * 0.4;\n  const rh = 45 + fontSize;\n  const rBorder = 35;\n  const rFill = \"rgba(0,0,0,.7)\";\n  const groupStyle: React.CSSProperties = {\n    cursor: \"pointer\",\n  };\n  let shiftX = 0;\n  let shiftY = 0;\n  const shiftOffset = 50;\n  if (position === \"top\") {\n    shiftY = -(rh / 2 + shiftOffset);\n  } else if (position === \"bottom\") {\n    shiftY = +(rh / 2 + shiftOffset);\n  } else if (position === \"left\") {\n    shiftX = -(rw / 2 + shiftOffset);\n  } else if (position === \"right\") {\n    shiftX = +(rw / 2 + shiftOffset);\n  } else {\n    throw Error(position);\n  }\n  const svgX = unitX - rw / 2 + shiftX;\n  const svgY = unitY - rh / 2 + shiftY;\n\n  /*\n   * r is the circle radius\n  cx and cy are offsets\n  rx and ry and rounded edges\n   */\n  return (\n    <svg\n      x={svgX}\n      y={svgY}\n      filter=\"drop-shadow(10px 10px 18px #222222)\"\n      onClick={clickHandler}\n    >\n      <g style={groupStyle}>\n        <rect\n          x={0}\n          y={0}\n          fill=\"white\"\n          width={rw}\n          height={rh}\n          rx={rBorder}\n          ry={rBorder}\n        />\n        <text\n          x={rw / 2}\n          y={rh / 2}\n          textAnchor=\"middle\"\n          alignmentBaseline=\"middle\"\n          fontFamily=\"Roboto\"\n          fontSize={fontSize}\n          style={{\n            userSelect: \"none\",\n          }}\n          fill=\"black\"\n        >\n          {text}\n        </text>\n      </g>\n    </svg>\n  );\n};\n\nexport default WDFlyoutButton;\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport { Box, Button, Stack } from \"@mui/material\";\nimport {\n  gameApiSliceActions,\n  gameLegalOrders,\n  gameMaps,\n  gameOrder,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport { Unit } from \"../../../utils/map/getUnits\";\n\nimport WDFlyoutButton from \"./WDFlyoutButton\";\nimport TerritoryMap from \"../../../data/map/variants/classic/TerritoryMap\";\n\ninterface WDFlyoutContainerProps {\n  units: Unit[];\n}\n\nconst WDFlyoutContainer: React.FC<WDFlyoutContainerProps> = function ({\n  units,\n}): React.ReactElement {\n  const dispatch = useAppDispatch();\n  const order = useAppSelector(gameOrder);\n  const maps = useAppSelector(gameMaps);\n  const legalOrders = useAppSelector(gameLegalOrders);\n\n  // console.log(\"FLYOUT\");\n  // console.log({ order });\n\n  if (!order.inProgress || order.type || !order.unitID) {\n    return <Box />;\n  }\n\n  const unit = units.find((u) => u.unit.id === order.unitID);\n\n  const mTerr = TerritoryMap[maps.unitToTerritory[order.unitID]];\n  const { province, unitSlotName } = mTerr;\n  const clickHandler =\n    (orderType, viaConvoy: string | undefined = undefined) =>\n    () => {\n      // console.log(`Dispatched ${orderType}`);\n      dispatch(\n        gameApiSliceActions.updateOrder({\n          type: orderType,\n          viaConvoy,\n        }),\n      );\n    };\n  return (\n    <>\n      <WDFlyoutButton\n        province={province}\n        unitSlotName={unitSlotName}\n        position=\"left\"\n        text=\"Hold\"\n        clickHandler={clickHandler(\"Hold\")}\n      />\n      <WDFlyoutButton\n        province={province}\n        unitSlotName={unitSlotName}\n        position=\"right\"\n        text=\"Move\"\n        clickHandler={clickHandler(\"Move\")}\n      />\n      <WDFlyoutButton\n        province={province}\n        unitSlotName={unitSlotName}\n        position=\"top\"\n        text=\"Support\"\n        clickHandler={clickHandler(\"Support\")}\n      />\n      {(unit?.unit?.type === \"Fleet\" &&\n        mTerr.provinceMapData.type === \"Sea\" &&\n        legalOrders.hasAnyLegalConvoysByUnitID[order.unitID] && (\n          <WDFlyoutButton\n            province={province}\n            unitSlotName={unitSlotName}\n            position=\"bottom\"\n            text=\"Convoy\"\n            clickHandler={clickHandler(\"Convoy\")}\n          />\n        )) || <g />}\n      {unit?.unit?.type === \"Army\" &&\n        legalOrders.legalViasByUnitID[order.unitID].length > 0 && (\n          <WDFlyoutButton\n            province={province}\n            unitSlotName={unitSlotName}\n            position=\"bottom\"\n            text=\"Via Convoy\"\n            clickHandler={clickHandler(\"Move\", \"Yes\")}\n          />\n        )}\n    </>\n  );\n};\n\nexport default WDFlyoutContainer;\n","import * as React from \"react\";\nimport ArrowColor from \"../../enums/ArrowColor\";\nimport ArrowType from \"../../enums/ArrowType\";\nimport Territory from \"../../enums/map/variants/classic/Territory\";\nimport webDiplomacyTheme from \"../../webDiplomacyTheme\";\nimport arrowDispatchReceiveCoordinates from \"./arrowDispatchReceiveCoordinates\";\nimport TerritoryMap from \"../../data/map/variants/classic/TerritoryMap\";\nimport { UNIT_HEIGHT, UNIT_WIDTH } from \"../../components/ui/units/WDUnit\";\n\n// Returns the coordinates of the upper left corner of the source or destination\n// of an arrow, and the source or destination object's width and height.\n// Type and identifier specify what object the arrow is pointing to, which is\n// necessary for targeting and spacing the arrow appropriately.\n// If type is \"arrow\", then identifier must be a 4-tuple of the coordinates\n// [x1, y1, x2, y2] of that arrow.\n// For all other types, identifier must be a Territory.\nexport function getTargetXYWH(\n  type: \"territory\" | \"unit\" | \"arrow\" | \"dislodger\",\n  identifier: Territory | [number, number, number, number],\n): [number, number, number, number] {\n  let x;\n  let y;\n  let width;\n  let height;\n\n  switch (type) {\n    case \"arrow\": {\n      // If the target of this arrow is itself an arrow, then target a point\n      // attachPoint proportion of the way along that arrow.\n      const [arrowX1, arrowY1, arrowX2, arrowY2] = identifier as [\n        number,\n        number,\n        number,\n        number,\n      ];\n      const attachPoint = 0.75;\n      const run = arrowX2 - arrowX1;\n      const rise = arrowY2 - arrowY1;\n\n      x = arrowX1 + run * attachPoint;\n      y = arrowY1 + rise * attachPoint;\n      width = 0;\n      height = 0;\n      break;\n    }\n    // If the target of this arrow is a unit, then (regardless of whether the\n    // unit drawing code actually draws a unit there), draw an arrow to the\n    // slot that the unit would be placed at, spaced appropriately for the size\n    // that unit's icon would be.\n    case \"unit\": {\n      const toTerritoryName = Territory[identifier as Territory];\n      const toTerritoryData = TerritoryMap[toTerritoryName].provinceMapData;\n      const { unitSlotName } = TerritoryMap[toTerritoryName];\n\n      x = toTerritoryData.x;\n      y = toTerritoryData.y;\n      if (toTerritoryData.unitSlotsBySlotName[unitSlotName]) {\n        x += toTerritoryData.unitSlotsBySlotName[unitSlotName].x;\n        y += toTerritoryData.unitSlotsBySlotName[unitSlotName].y;\n      }\n      width = UNIT_WIDTH;\n      height = UNIT_HEIGHT;\n      break;\n    }\n    // Units on retreat phases that are dislodging another unit are placed in\n    // the arrow receiver slot rather than in the normal unit drawing slot.\n    // This is so they don't overlap the drawing of the unit in that territory\n    // that needs to perform a retreat.\n    // So when drawing an arrow to a dislodger, we need to point at the\n    // arrow receiver slot instead.\n    case \"dislodger\": {\n      const toTerritoryName = Territory[identifier as Territory];\n      const toTerritoryData = TerritoryMap[toTerritoryName].provinceMapData;\n      const { unitSlotName } = TerritoryMap[toTerritoryName];\n\n      x = toTerritoryData.x;\n      y = toTerritoryData.y;\n      if (toTerritoryData.unitSlotsBySlotName[unitSlotName]) {\n        x += toTerritoryData.unitSlotsBySlotName[unitSlotName].arrowReceiver.x;\n        y += toTerritoryData.unitSlotsBySlotName[unitSlotName].arrowReceiver.y;\n      }\n      width = UNIT_WIDTH;\n      height = UNIT_HEIGHT;\n      break;\n    }\n    // Otherwise, draw an arrow pointing to the arrow receiver slot of the\n    // territory. We still draw the arrow as if pointing to an object\n    // of a small buffersize many pixels. That way, the arrows stop slightly short\n    // of the exact target location. This looks a bit nicer when\n    // multiple arrows point to the same territory - the arrow points\n    // stop slightly short of each other instead of all overlapping.\n    default: {\n      const toTerritoryName = Territory[identifier as Territory];\n      const toTerritoryData = TerritoryMap[toTerritoryName].provinceMapData;\n      const { unitSlotName } = TerritoryMap[toTerritoryName];\n\n      const bufferSize = 12;\n\n      x = toTerritoryData.x;\n      y = toTerritoryData.y;\n      if (toTerritoryData.unitSlotsBySlotName[unitSlotName]) {\n        x += toTerritoryData.unitSlotsBySlotName[unitSlotName].arrowReceiver.x;\n        y += toTerritoryData.unitSlotsBySlotName[unitSlotName].arrowReceiver.y;\n      }\n      width = bufferSize;\n      height = bufferSize;\n      break;\n    }\n  }\n\n  return [x, y, width, height];\n}\n\n// See getTargetXYWH for a description of the possible types and identifiers.\nexport function getArrowX1Y1X2Y2(\n  sourceType: \"territory\" | \"unit\" | \"arrow\" | \"dislodger\",\n  sourceIdentifier: Territory | [number, number, number, number],\n  receiverType: \"territory\" | \"unit\" | \"arrow\" | \"dislodger\",\n  receiverIdentifier: Territory | [number, number, number, number],\n): [number, number, number, number] {\n  // Source of arrow\n  // eslint-disable-next-line prefer-const\n  let [sx1, sy1, sourceWidth, sourceHeight] = getTargetXYWH(\n    sourceType,\n    sourceIdentifier,\n  );\n  const [rx2, ry2, receiverWidth, receiverHeight] = getTargetXYWH(\n    receiverType,\n    receiverIdentifier,\n  );\n\n  // Draw the arrows slightly closer to a unit than their nominal size for the arrow source, the portion of\n  // the unit's nominal size that the unit icon actually covers is a bit smaller and\n  // the arrow looks a bit too far away otherwise.\n  const UNIT_SOURCE_SHRINK_FACTOR = 0.8;\n  if (sourceType === \"unit\" || sourceType === \"dislodger\") {\n    sourceWidth *= UNIT_SOURCE_SHRINK_FACTOR;\n    sourceHeight *= UNIT_SOURCE_SHRINK_FACTOR;\n  }\n\n  const { x1, x2, y1, y2 } = arrowDispatchReceiveCoordinates(\n    sourceHeight,\n    sourceWidth,\n    receiverHeight,\n    receiverWidth,\n    sx1,\n    rx2,\n    sy1,\n    ry2,\n  );\n\n  return [x1, y1, x2, y2];\n}\n\n// See getTargetXYWH for a description of the possible types and identifiers.\nexport default function drawArrowFunctional(\n  arrowType: ArrowType,\n  arrowColor: ArrowColor,\n  sourceType: \"territory\" | \"unit\" | \"arrow\" | \"dislodger\",\n  sourceIdentifier: Territory | [number, number, number, number],\n  receiverType: \"territory\" | \"unit\" | \"arrow\" | \"dislodger\",\n  receiverIdentifier: Territory | [number, number, number, number],\n  offsetArrowSourcePixels = 0.0,\n): React.ReactElement {\n  // console.log(\n  //   `drawArrowFunctional ${sourceIdentifier} ${receiverType} ${receiverIdentifier} `,\n  // );\n  // eslint-disable-next-line prefer-const\n  let [x1, y1, x2, y2] = getArrowX1Y1X2Y2(\n    sourceType,\n    sourceIdentifier,\n    receiverType,\n    receiverIdentifier,\n  );\n\n  let strokeDasharray: string | undefined;\n  if (arrowType === ArrowType.CONVOY) {\n    strokeDasharray = \"4 3\";\n  } else if (arrowType === ArrowType.HOLD) {\n    strokeDasharray = \"12 3\";\n  }\n\n  let strokeWidth;\n  switch (arrowColor) {\n    case ArrowColor.MOVE:\n    case ArrowColor.CONVOY:\n    case ArrowColor.IMPLIED:\n    case ArrowColor.IMPLIED_FOREIGN:\n    case ArrowColor.RETREAT:\n    case ArrowColor.SUPPORT_HOLD:\n    case ArrowColor.SUPPORT_MOVE:\n      strokeWidth = 3.5;\n      break;\n    case ArrowColor.MOVE_FAILED:\n    case ArrowColor.CONVOY_FAILED:\n    case ArrowColor.SUPPORT_HOLD_FAILED:\n    case ArrowColor.SUPPORT_MOVE_FAILED:\n      strokeWidth = 3;\n      break;\n    default:\n      strokeWidth = 3.5;\n  }\n\n  if (offsetArrowSourcePixels > 0) {\n    // Offset the source location perpendicular to the direction of travel by\n    // offsetArrowSourcePixels distance.\n    // Start by finding a unit vector in the direction of the arrows\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    if (length > 0) {\n      const dxunit = dx / length;\n      const dyunit = dy / length;\n      // Rotate 90 degrees\n      const dxunitRotated = dyunit;\n      const dyunitRotated = -dxunit;\n      // Add the desired number of pixels\n      x1 += offsetArrowSourcePixels * dxunitRotated;\n      y1 += offsetArrowSourcePixels * dyunitRotated;\n    }\n  }\n\n  return (\n    <line\n      key={`${x1}-${y1}-${x2}-${y2}-${arrowType}-${arrowColor}`}\n      x1={x1}\n      y1={y1}\n      x2={x2}\n      y2={y2}\n      markerEnd={`url(#arrowHead__${ArrowType[arrowType]}_${ArrowColor[arrowColor]})`}\n      stroke={webDiplomacyTheme.palette.arrowColors[arrowColor].main}\n      strokeWidth={strokeWidth}\n      strokeDasharray={strokeDasharray}\n    />\n  );\n}\n","export default function arrowDispatchReceiveCoordinates(\n  unitH: number, // dispatch unit height\n  unitW: number, // dispatch unit width\n  rh: number, // receiver height\n  rw: number, // receiver width\n  x1: number, // line x1\n  x2: number, // line x2\n  y1: number, // line y1\n  y2: number, // line y2\n): {\n  x1: number;\n  x2: number;\n  y1: number;\n  y2: number;\n} {\n  // Compute the angle that we need the arrow to go at\n  // If there isn't an angle because the diff is too small, quit out immediately\n  const xDiff = x2 - x1;\n  const yDiff = y2 - y1;\n  if (Math.abs(xDiff) <= 1e-10 && Math.abs(yDiff) <= 1e-10) {\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n  const theta = Math.atan2(yDiff, xDiff);\n\n  // Make the arrow start at the border of the ellipse with the specified\n  // width and height.\n  const x1New = x1 + (unitW / 2) * Math.cos(theta);\n  const y1New = y1 + (unitH / 2) * Math.sin(theta);\n\n  // Make the arrow end at the border of the ellipse with the specified\n  // width and height.\n  const x2New = x2 - (rw / 2) * Math.cos(theta);\n  const y2New = y2 - (rh / 2) * Math.sin(theta);\n\n  // If the result would give an arrow that points backwards, due to overlap\n  // between the source and destination then give up and don't do adjustment\n  // for the source and receiver width and height.\n  // Determine if it points backwards by dot product with the original vector\n  const xDiffNew = x2New - x1New;\n  const yDiffNew = y2New - y1New;\n  if (xDiffNew * xDiff + yDiffNew * yDiff <= 1e-10) {\n    return {\n      x1,\n      x2,\n      y1,\n      y2,\n    };\n  }\n\n  return {\n    x1: x1New,\n    x2: x2New,\n    y1: y1New,\n    y2: y2New,\n  };\n}\n","/* eslint-disable no-bitwise */\nimport * as React from \"react\";\nimport countryMap from \"../../../data/map/variants/classic/CountryMap\";\nimport { IOrderDataHistorical } from \"../../../models/Interfaces\";\nimport {\n  gameApiSliceActions,\n  gameOverview,\n  gameTerritoriesMeta,\n} from \"../../../state/game/game-api-slice\";\nimport { useAppDispatch, useAppSelector } from \"../../../state/hooks\";\nimport GameStateMaps from \"../../../state/interfaces/GameStateMaps\";\nimport ArrowType from \"../../../enums/ArrowType\";\nimport ArrowColor from \"../../../enums/ArrowColor\";\nimport drawArrowFunctional, {\n  getTargetXYWH,\n  getArrowX1Y1X2Y2,\n} from \"../../../utils/map/drawArrowFunctional\";\nimport TerritoryMap from \"../../../data/map/variants/classic/TerritoryMap\";\nimport { APITerritories } from \"../../../state/interfaces/GameDataResponse\";\nimport { Unit, UnitDrawMode } from \"../../../utils/map/getUnits\";\nimport Province from \"../../../enums/map/variants/classic/Province\";\nimport provincesMapData from \"../../../data/map/ProvincesMapData\";\nimport Territory from \"../../../enums/map/variants/classic/Territory\";\n\n// Indicates that we should draw this Province as having a standoff.\nexport interface StandoffInfo {\n  // The webdip province ID of the standoff\n  provID: string;\n  // The province of the standoff\n  province: Province;\n  // The source and destination of moves that caused the standoff\n  attemptedMoves: [Territory, Territory][];\n}\n\nfunction accumulateMoveOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  territories: APITerritories,\n): void {\n  // console.log(\"drawMoveOrders\");\n  orders\n    .filter((order) => order.type === \"Move\")\n    .forEach((order) => {\n      if (!order.toTerrID) {\n        return;\n      }\n      // console.log({\n      //   order,\n      //   territories,\n      //   terrID: order.terrID,\n      //   lookup: territories[order.terrID],\n      // });\n      const fromTerr = TerritoryMap[territories[order.terrID].name].territory;\n      const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          order.success === \"Yes\" ? ArrowColor.MOVE : ArrowColor.MOVE_FAILED,\n          \"unit\",\n          fromTerr,\n          \"territory\",\n          toTerr,\n        ),\n      );\n      // console.log(\"ARROW\");\n      // console.log(arrows[0]);\n\n      if (order.viaConvoy === \"Yes\") {\n        // TODO need to distinguish via vs nonvia orders??\n      }\n    });\n}\n\nfunction getProvIDNumberOfTerrIDNumber(\n  terrID: number,\n  territories: APITerritories,\n): number {\n  if (territories[terrID]?.coastParentID) {\n    return Number(territories[terrID].coastParentID);\n  }\n  return terrID;\n}\n\nfunction accumulateSupportHoldOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  ordersByProvID: { [key: number]: IOrderDataHistorical },\n  territories: APITerritories,\n): void {\n  // Maps supportee and supporter provIDs to help us find mutual supports.\n  const supporterProvIDToSupporteeProvID: { [key: number]: number } = {};\n  orders\n    .filter((order) => order.type === \"Support hold\")\n    .forEach((order) => {\n      const provID = getProvIDNumberOfTerrIDNumber(order.terrID, territories);\n      // Support orders toTerrID are always provinces\n      const supporteeProvID = order.toTerrID;\n      supporterProvIDToSupporteeProvID[provID] = supporteeProvID;\n    });\n  // console.log({ supporterProvIDToSupporteeProvID });\n\n  orders\n    .filter((order) => order.type === \"Support hold\")\n    .forEach((order) => {\n      if (!order.toTerrID) {\n        return;\n      }\n      const supporterProvID = getProvIDNumberOfTerrIDNumber(\n        order.terrID,\n        territories,\n      );\n      const supporterTerr =\n        TerritoryMap[territories[order.terrID].name].territory;\n\n      // Support orders toTerrID are actually always provinces\n      const supporteeProvID = order.toTerrID;\n      const supporteeOrder = ordersByProvID[supporteeProvID];\n\n      // If the supportee order is found at all, use it for the\n      // supportee territory since it is a territory id whereas the supporter's\n      // order might be province id.\n      const supporteeTerr = supporteeOrder\n        ? TerritoryMap[territories[supporteeOrder.terrID].name].territory\n        : TerritoryMap[territories[order.toTerrID].name].territory;\n\n      const arrowColor =\n        order.success === \"Yes\"\n          ? ArrowColor.SUPPORT_HOLD\n          : ArrowColor.SUPPORT_HOLD_FAILED;\n\n      // In case of a mutual support hold, offset the support line by a few pixels\n      // so that the corresponding returning support line from the other order\n      // doesn't overlap with it.\n      const hasMutualSupport =\n        supporterProvIDToSupporteeProvID[supporteeProvID] === supporterProvID;\n      const offsetArrowSourcePixels = hasMutualSupport ? 6 : 0;\n      // console.log({\n      //   supporteeProvID,\n      //   supporterProvID,\n      //   hasMutualSupport,\n      //   offsetArrowSourcePixels,\n      // });\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.HOLD,\n          arrowColor,\n          \"unit\",\n          supporterTerr,\n          \"unit\",\n          supporteeTerr,\n          offsetArrowSourcePixels,\n        ),\n      );\n    });\n}\n\nfunction accumulateSupportMoveOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  ordersByProvID: { [key: number]: IOrderDataHistorical },\n  territories: APITerritories,\n  ghostArrowsAlreadyAdded: Set<string>,\n): void {\n  orders\n    .filter((order) => order.type === \"Support move\")\n    .forEach((order) => {\n      if (!(order.fromTerrID && order.toTerrID)) {\n        return;\n      }\n\n      const supporterTerr =\n        TerritoryMap[territories[order.terrID].name].territory;\n      let isCoordinated = false;\n      // Support orders fromTerrID are actually always provinces\n      const supporteeProvID = order.fromTerrID;\n      const supporteeOrder = ordersByProvID[supporteeProvID];\n      if (\n        supporteeOrder &&\n        supporteeOrder.type === \"Move\" &&\n        (supporteeOrder.terrID === order.fromTerrID ||\n          territories[supporteeOrder.terrID].coastParentID ===\n            order.fromTerrID.toString()) &&\n        (supporteeOrder.toTerrID === order.toTerrID ||\n          territories[supporteeOrder.toTerrID].coastParentID ===\n            order.toTerrID.toString())\n      ) {\n        isCoordinated = true;\n      }\n\n      // If the supportee order is found at all, use it for the\n      // supportee territory since it is coast qualified whereas the supporter's\n      // order does not have to be coast qualified.\n      const supporteeTerr = supporteeOrder\n        ? TerritoryMap[territories[supporteeOrder.terrID].name].territory\n        : TerritoryMap[territories[order.fromTerrID].name].territory;\n\n      const arrowColor =\n        order.success === \"Yes\"\n          ? ArrowColor.SUPPORT_MOVE\n          : ArrowColor.SUPPORT_MOVE_FAILED;\n\n      if (isCoordinated) {\n        // For coordinated supports, use the order for the supportee for determining\n        // the destination location because the destination of the supportee order\n        // must be coast-qualified whereas the locations of the supporter order\n        // does not have to be coast-qualified.\n        const toTerr =\n          TerritoryMap[territories[supporteeOrder.toTerrID].name].territory;\n\n        arrows.push(\n          drawArrowFunctional(\n            ArrowType.SUPPORT,\n            arrowColor,\n            \"unit\",\n            supporterTerr,\n            \"arrow\",\n            getArrowX1Y1X2Y2(\"unit\", supporteeTerr, \"territory\", toTerr),\n          ),\n        );\n      } else {\n        // Uncoordinated supports\n        const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n        arrows.push(\n          drawArrowFunctional(\n            ArrowType.SUPPORT,\n            arrowColor,\n            \"unit\",\n            supporterTerr,\n            \"arrow\",\n            getArrowX1Y1X2Y2(\"unit\", supporteeTerr, \"territory\", toTerr),\n          ),\n        );\n        // Also draw a ghosty arrow of what we're trying to support.\n        const ghostArrowID = `${supporteeTerr}|${toTerr}`;\n        if (!ghostArrowsAlreadyAdded.has(ghostArrowID)) {\n          ghostArrowsAlreadyAdded.add(ghostArrowID);\n          arrows.push(\n            drawArrowFunctional(\n              ArrowType.MOVE,\n              ArrowColor.IMPLIED_FOREIGN,\n              \"unit\",\n              supporteeTerr,\n              \"territory\",\n              toTerr,\n            ),\n          );\n        }\n      }\n    });\n}\n\nfunction accumulateConvoyOrderArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  ordersByProvID: { [key: number]: IOrderDataHistorical },\n  territories: APITerritories,\n  ghostArrowsAlreadyAdded: Set<string>,\n): void {\n  orders\n    .filter((order) => order.type === \"Convoy\")\n    .forEach((order) => {\n      if (!(order.fromTerrID && order.toTerrID)) {\n        return;\n      }\n\n      const convoyerTerr =\n        TerritoryMap[territories[order.terrID].name].territory;\n      const convoyeeTerr =\n        TerritoryMap[territories[order.fromTerrID].name].territory;\n      let isCoordinated = false;\n      // Convoyees are always armies, whose terrIDs and provIDs match\n      const convoyeeOrder = ordersByProvID[order.fromTerrID];\n      if (\n        convoyeeOrder &&\n        convoyeeOrder.type === \"Move\" &&\n        convoyeeOrder.terrID === order.fromTerrID &&\n        (convoyeeOrder.toTerrID === order.toTerrID ||\n          territories[convoyeeOrder.toTerrID].coastParentID ===\n            order.toTerrID.toString())\n      ) {\n        isCoordinated = true;\n      }\n\n      const arrowColor =\n        order.success === \"Yes\" ? ArrowColor.CONVOY : ArrowColor.CONVOY_FAILED;\n\n      const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.CONVOY,\n          arrowColor,\n          \"unit\",\n          convoyerTerr,\n          \"arrow\",\n          getArrowX1Y1X2Y2(\"unit\", convoyeeTerr, \"territory\", toTerr),\n        ),\n      );\n      if (!isCoordinated) {\n        // Also draw a ghosty arrow of what we're trying to support.\n        const ghostArrowID = `${convoyeeTerr}|${toTerr}`;\n        if (!ghostArrowsAlreadyAdded.has(ghostArrowID)) {\n          ghostArrowsAlreadyAdded.add(ghostArrowID);\n          arrows.push(\n            drawArrowFunctional(\n              ArrowType.MOVE,\n              ArrowColor.IMPLIED_FOREIGN,\n              \"unit\",\n              convoyeeTerr,\n              \"territory\",\n              toTerr,\n            ),\n          );\n        }\n      }\n    });\n}\n\nfunction accumulateRetreatArrows(\n  arrows: (React.ReactElement | null)[],\n  orders: IOrderDataHistorical[],\n  territories: APITerritories,\n): void {\n  orders\n    .filter((order) => order.type === \"Retreat\")\n    .forEach((order) => {\n      if (!order.toTerrID) {\n        return;\n      }\n      const fromTerr = TerritoryMap[territories[order.terrID].name].territory;\n      const toTerr = TerritoryMap[territories[order.toTerrID].name].territory;\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          ArrowColor.RETREAT,\n          \"unit\",\n          fromTerr,\n          \"territory\",\n          toTerr,\n        ),\n      );\n    });\n}\n\nfunction accumulateDislodgerArrows(\n  arrows: (React.ReactElement | null)[],\n  units: Unit[],\n  territories: APITerritories,\n): void {\n  units\n    .filter((unit) => unit.drawMode === UnitDrawMode.DISLODGING)\n    .forEach((unit) => {\n      if (unit.movedFromTerrID === null) return;\n      const fromTerr =\n        TerritoryMap[territories[unit.movedFromTerrID].name].territory;\n      const toTerr = TerritoryMap[territories[unit.unit.terrID].name].territory;\n\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          ArrowColor.MOVE,\n          \"territory\",\n          fromTerr,\n          \"dislodger\",\n          toTerr,\n        ),\n      );\n    });\n}\n\n// This isn't exactly an arrow, but...\nfunction accumulateBuildCircles(\n  arrows: (React.ReactElement | null)[],\n  units: Unit[],\n  territories: APITerritories,\n): void {\n  units\n    .filter((unit) => unit.drawMode === UnitDrawMode.BUILD)\n    .forEach((unit) => {\n      const terr = TerritoryMap[territories[unit.unit.terrID].name].territory;\n      const [x, y, w, h] = getTargetXYWH(\"unit\", terr);\n\n      arrows.push(\n        <circle\n          key={`build-circle-${terr}`}\n          cx={x}\n          cy={y}\n          r={(1.4 * (w + h)) / 4}\n          fill=\"none\"\n          stroke=\"rgb(0,150,0)\"\n          strokeWidth={0.05 * (w + h)}\n        />,\n      );\n    });\n}\n\nfunction accumulateDisbandMarks(\n  arrows: (React.ReactElement | null)[],\n  units: Unit[],\n  territories: APITerritories,\n): void {\n  units\n    .filter((unit) => unit.drawMode === UnitDrawMode.DISBANDED)\n    .forEach((unit) => {\n      const terr = TerritoryMap[territories[unit.unit.terrID].name].territory;\n      const [x1, y1, w1, h1] = getTargetXYWH(\"unit\", terr);\n      const MARKSIZE = 38;\n      arrows.push(\n        <line\n          key={`disbandmark-${terr}-1`}\n          x1={x1 - MARKSIZE}\n          y1={y1 - MARKSIZE}\n          x2={x1 + MARKSIZE}\n          y2={y1 + MARKSIZE}\n          stroke=\"red\"\n          strokeWidth={4}\n        />,\n      );\n      arrows.push(\n        <line\n          key={`disbandmark-${terr}-2`}\n          x1={x1 + MARKSIZE}\n          y1={y1 - MARKSIZE}\n          x2={x1 - MARKSIZE}\n          y2={y1 + MARKSIZE}\n          stroke=\"red\"\n          strokeWidth={4}\n        />,\n      );\n    });\n}\n\nfunction accumulateStandoffMarks(\n  arrows: (React.ReactElement | null)[],\n  standoffs: StandoffInfo[],\n): void {\n  standoffs.forEach((standoff) => {\n    const { province } = standoff;\n    const { rootTerritory } = provincesMapData[province];\n    if (!rootTerritory) return;\n\n    const [x1, y1, w1, h1] = getTargetXYWH(\"territory\", rootTerritory);\n    const MARKSIZE = 15;\n    arrows.push(\n      <line\n        key={`standoffmark-${province}-1`}\n        x1={x1 - MARKSIZE}\n        y1={y1 - MARKSIZE}\n        x2={x1 + MARKSIZE}\n        y2={y1 + MARKSIZE}\n        stroke=\"tomato\"\n        strokeWidth={6}\n      />,\n    );\n    arrows.push(\n      <line\n        key={`standoffmark-${province}-2`}\n        x1={x1 + MARKSIZE}\n        y1={y1 - MARKSIZE}\n        x2={x1 - MARKSIZE}\n        y2={y1 + MARKSIZE}\n        stroke=\"tomato\"\n        strokeWidth={6}\n      />,\n    );\n    standoff.attemptedMoves.forEach(([src, dst]) => {\n      arrows.push(\n        drawArrowFunctional(\n          ArrowType.MOVE,\n          ArrowColor.MOVE_FAILED,\n          \"unit\",\n          src,\n          \"territory\",\n          dst,\n        ),\n      );\n    });\n  });\n}\n\n/*\nexport interface IOrderDataHistorical {\n  countryID: string;\n  dislodged: string;\n  fromTerrID: number;\n  phase: string;\n  success: string;\n  terrID: number;\n  toTerrID: number;\n  turn: number;\n  type: string;\n  unitType: string;\n  viaConvoy: string;\n}\n*/\n\ninterface WDArrowProps {\n  orders: IOrderDataHistorical[];\n  units: Unit[];\n  maps: GameStateMaps;\n  territories: APITerritories;\n  standoffs: StandoffInfo[];\n}\n\nconst WDArrowContainer: React.FC<WDArrowProps> = function ({\n  orders,\n  units,\n  maps,\n  territories,\n  standoffs,\n}): React.ReactElement {\n  const arrows: (React.ReactElement | null)[] = [];\n\n  const ordersByProvID = {};\n  orders.forEach((order) => {\n    ordersByProvID[getProvIDNumberOfTerrIDNumber(order.terrID, territories)] =\n      order;\n  });\n  // Accumulate ghosty arrows so that we don't draw multiples of them if we have\n  // multiple units supporting or convoying a unit that isn't coordinated with them.\n  const ghostArrowsAlreadyAdded = new Set<string>();\n  accumulateMoveOrderArrows(arrows, orders, territories);\n  accumulateSupportHoldOrderArrows(arrows, orders, ordersByProvID, territories);\n  accumulateSupportMoveOrderArrows(\n    arrows,\n    orders,\n    ordersByProvID,\n    territories,\n    ghostArrowsAlreadyAdded,\n  );\n  accumulateConvoyOrderArrows(\n    arrows,\n    orders,\n    ordersByProvID,\n    territories,\n    ghostArrowsAlreadyAdded,\n  );\n  accumulateRetreatArrows(arrows, orders, territories);\n  accumulateDislodgerArrows(arrows, units, territories);\n  accumulateBuildCircles(arrows, units, territories);\n  accumulateDisbandMarks(arrows, units, territories);\n  accumulateStandoffMarks(arrows, standoffs);\n  return <g id=\"arrows\">{arrows}</g>;\n};\n\nexport default WDArrowContainer;\n","import * as React from \"react\";\nimport WDBoardMap from \"./variants/classic/components/WDBoardMap\";\nimport CapturableLandTexture from \"../../assets/textures/capturable-land.jpeg\";\nimport WaterTexture from \"../../assets/textures/sea-texture.png\";\nimport WDArrowMarkerDefs from \"../../utils/map/WDArrowMarkerDefs\";\nimport WDBuildContainer from \"./components/WDBuildContainer\";\nimport WDFlyoutContainer from \"./components/WDFlyoutContainer\";\nimport WDArrowContainer, { StandoffInfo } from \"./components/WDArrowContainer\";\nimport { Unit } from \"../../utils/map/getUnits\";\nimport { IOrderDataHistorical } from \"../../models/Interfaces\";\nimport GameStateMaps from \"../../state/interfaces/GameStateMaps\";\nimport { APITerritories } from \"../../state/interfaces/GameDataResponse\";\nimport Territory from \"../../enums/map/variants/classic/Territory\";\nimport Province from \"../../enums/map/variants/classic/Province\";\n\ninterface WDMapProps {\n  units: Unit[];\n  phase: string;\n  orders: IOrderDataHistorical[];\n  maps: GameStateMaps;\n  territories: APITerritories;\n  centersByProvince: { [key: string]: { ownerCountryID: string } };\n  standoffs: StandoffInfo[];\n  isLivePhase: boolean; // Game is live and user is viewing the latest phase?\n}\n\nconst WDMap: React.ForwardRefExoticComponent<\n  WDMapProps & React.RefAttributes<SVGSVGElement>\n> = React.forwardRef<SVGSVGElement, WDMapProps>(\n  (\n    {\n      units,\n      phase,\n      orders,\n      maps,\n      territories,\n      centersByProvince,\n      standoffs,\n      isLivePhase,\n    },\n    ref,\n  ): React.ReactElement => (\n    <svg\n      id=\"map\"\n      fill=\"none\"\n      ref={ref}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n      }}\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g id=\"full-map-svg\">\n        <g id=\"container\">\n          <WDBoardMap\n            units={units}\n            centersByProvince={centersByProvince}\n            phase={phase}\n            isLivePhase={isLivePhase}\n          />\n          <WDArrowContainer\n            orders={orders}\n            units={units}\n            maps={maps}\n            territories={territories}\n            standoffs={standoffs}\n          />\n          {isLivePhase && <WDBuildContainer />}\n          {isLivePhase && <WDFlyoutContainer units={units} />}\n        </g>\n      </g>\n      <defs>\n        <pattern\n          id=\"capturable-land\"\n          patternUnits=\"userSpaceOnUse\"\n          width=\"1546\"\n          height=\"1384\"\n        >\n          <image\n            href={CapturableLandTexture}\n            x=\"0\"\n            y=\"0\"\n            width=\"1546\"\n            height=\"1384\"\n          />\n        </pattern>\n        <pattern\n          id=\"sea-texture\"\n          patternUnits=\"userSpaceOnUse\"\n          width=\"1546\"\n          height=\"1384\"\n        >\n          <image href={WaterTexture} x=\"0\" y=\"0\" width=\"1966\" height=\"1615\" />\n        </pattern>\n        {WDArrowMarkerDefs()}\n\n        <pattern\n          id=\"neutral-land-texture\"\n          width=\"30\"\n          height=\"10\"\n          patternTransform=\"rotate(45 0 0)\"\n          patternUnits=\"userSpaceOnUse\"\n        >\n          <rect\n            x=\"0\"\n            y=\"0\"\n            width=\"30\"\n            height=\"10\"\n            style={{ fill: \"#C5BFBE\" }}\n          />\n          <line\n            x1=\"0\"\n            y1=\"0\"\n            x2=\"0\"\n            y2=\"10\"\n            style={{ stroke: \"#B5AFAE\", strokeWidth: 30 }}\n          />\n        </pattern>\n\n        <filter id=\"selectionGlow\" height=\"120%\" width=\"120%\" x=\"-10%\" y=\"-10%\">\n          <feMorphology\n            operator=\"dilate\"\n            radius=\"5\"\n            in=\"SourceAlpha\"\n            result=\"thickerSource\"\n          />\n          <feGaussianBlur\n            stdDeviation=\"8\"\n            in=\"thickerSource\"\n            result=\"blurredSource\"\n          />\n          <feFlood floodColor=\"rgb(100,200,255)\" result=\"glowColor\" />\n          <feComposite\n            in=\"glowColor\"\n            in2=\"blurredSource\"\n            operator=\"in\"\n            result=\"selectionGlowGlow\"\n          />\n        </filter>\n        <filter id=\"choiceGlow\" height=\"120%\" width=\"120%\" x=\"-10%\" y=\"-10%\">\n          <feMorphology\n            operator=\"dilate\"\n            radius=\"1\"\n            in=\"SourceAlpha\"\n            result=\"thickerSource\"\n          />\n          <feGaussianBlur\n            stdDeviation=\"6\"\n            in=\"thickerSource\"\n            result=\"blurredSource\"\n          />\n          <feFlood floodColor=\"rgb(255,255,255)\" result=\"glowColor\" />\n          <feComposite\n            in=\"glowColor\"\n            in2=\"blurredSource\"\n            operator=\"in\"\n            result=\"choicesGlowGlow\"\n          />\n        </filter>\n      </defs>\n    </svg>\n  ),\n);\n\nexport default React.memo(WDMap);\n","import * as React from \"react\";\nimport * as d3 from \"d3\";\nimport Device from \"../../enums/Device\";\nimport getInitialViewTranslation from \"../../utils/map/getInitialViewTranslation\";\nimport Scale from \"../../types/Scale\";\nimport WDMap from \"../map/WDMap\";\nimport useViewport from \"../../hooks/useViewport\";\nimport getDevice from \"../../utils/getDevice\";\nimport { useAppDispatch, useAppSelector } from \"../../state/hooks\";\nimport {\n  gameApiSliceActions,\n  gameOrdersMeta,\n} from \"../../state/game/game-api-slice\";\nimport { Unit } from \"../../utils/map/getUnits\";\nimport { IOrderDataHistorical } from \"../../models/Interfaces\";\nimport GameStateMaps from \"../../state/interfaces/GameStateMaps\";\nimport { APITerritories } from \"../../state/interfaces/GameDataResponse\";\nimport Province from \"../../enums/map/variants/classic/Province\";\nimport { StandoffInfo } from \"../map/components/WDArrowContainer\";\n\nconst Scales: Scale = {\n  DESKTOP: [0.45, 3],\n  MOBILE_LG: [0.32, 1.6],\n  MOBILE_LG_LANDSCAPE: [0.3, 1.6],\n  MOBILE: [0.32, 1.6],\n  MOBILE_LANDSCAPE: [0.27, 1.6],\n  TABLET: [0.6275, 3],\n  TABLET_LANDSCAPE: [0.6, 3],\n};\n\nconst getInitialScaleForDevice = (device: Device): number[] => {\n  return Scales[device];\n};\n\nconst mapOriginalWidth = 6010;\nconst mapOriginalHeight = 3005;\n\ninterface WDMapControllerProps {\n  units: Unit[];\n  phase: string;\n  orders: IOrderDataHistorical[];\n  maps: GameStateMaps;\n  territories: APITerritories;\n  centersByProvince: { [key: string]: { ownerCountryID: string } };\n  standoffs: StandoffInfo[];\n  isLivePhase: boolean; // Game is live and user is viewing the latest phase?\n}\n\nconst WDMapController: React.FC<WDMapControllerProps> = function ({\n  units,\n  phase,\n  orders,\n  maps,\n  territories,\n  centersByProvince,\n  isLivePhase,\n  standoffs,\n}): React.ReactElement {\n  const svgElement = React.useRef<SVGSVGElement>(null);\n  const [viewport] = useViewport();\n  const dispatch = useAppDispatch();\n  const ordersMeta = useAppSelector(gameOrdersMeta);\n  const device = getDevice(viewport);\n  const [scaleMin, scaleMax] = getInitialScaleForDevice(device);\n\n  // const legalOrders = useAppSelector(gameLegalOrders);\n  // console.log({ legalOrders });\n\n  React.useLayoutEffect(() => {\n    if (svgElement.current) {\n      const fullMap = d3.select(svgElement.current);\n      const contained = fullMap.select(\"#container\");\n      const containedRect = contained.node().getBBox();\n      const gameBoardAreaRect = fullMap\n        .select(\"#playableProvinces\")\n        .node()\n        .getBBox();\n\n      const { scale, x, y } = getInitialViewTranslation(\n        containedRect,\n        gameBoardAreaRect,\n        scaleMin,\n        viewport,\n      );\n\n      const zoom = ({ transform }) => {\n        contained.attr(\"transform\", transform);\n      };\n\n      const d3Zoom = d3\n        .zoom()\n        .translateExtent([\n          [0, 0],\n          [mapOriginalWidth, mapOriginalHeight],\n        ])\n        .scaleExtent([scale, scaleMax])\n        .clickDistance(3)\n        .on(\"zoom\", zoom);\n\n      fullMap\n        .on(\"wheel\", (e) => e.preventDefault())\n        .call(d3Zoom)\n        .call(d3Zoom.transform, d3.zoomIdentity.translate(x, y).scale(scale))\n        .on(\"dblclick.zoom\", null);\n    }\n  }, [svgElement, viewport]);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      dispatch(gameApiSliceActions.updateOrdersMeta(ordersMeta));\n    }, 500);\n  }, []);\n\n  React.useEffect(() => {\n    const keydownHandler = (e) => {\n      const keyCode = e.which || e.keyCode;\n      const ESCAPE = 27;\n      // console.log(\"KEYCODE\");\n      // console.log(keyCode);\n      if (keyCode === ESCAPE) {\n        e.preventDefault();\n        // console.log(\"DISPATCH RESET ORDER\");\n        dispatch(gameApiSliceActions.resetOrder());\n      }\n    };\n    // console.log(\"ADDING HANLDER\");\n    window.addEventListener(\"keydown\", keydownHandler);\n    return () => window.removeEventListener(\"keydown\", keydownHandler);\n  });\n\n  return (\n    <div\n      style={{\n        width: viewport.width,\n        height: viewport.height,\n      }}\n    >\n      <WDMap\n        ref={svgElement}\n        units={units}\n        phase={phase}\n        orders={orders}\n        maps={maps}\n        territories={territories}\n        centersByProvince={centersByProvince}\n        standoffs={standoffs}\n        isLivePhase={isLivePhase}\n      />\n    </div>\n  );\n};\n\nexport default WDMapController;\n","import { Viewport, BBox } from \"../../interfaces\";\nimport Translation from \"../../types/Translation\";\n\nexport default function getInitialViewTranslation(\n  containedRect: BBox,\n  gameBoardRect: BBox,\n  scale: number,\n  viewport: Viewport,\n): Translation {\n  let newScale = scale;\n  const containedHeight = containedRect.height * scale;\n\n  if (containedHeight < viewport.height) {\n    newScale = scale + (1 - containedHeight / viewport.height);\n  }\n\n  const translatedGameBoardAreaHeight = gameBoardRect.height * newScale;\n  const translatedGameBoardAreaY = gameBoardRect.y * newScale;\n\n  const translatedGameBoardAreaWidth = gameBoardRect.width * newScale;\n  const translatedGameBoardAreaX = gameBoardRect.x * newScale;\n\n  const nonPlayableHorizontalArea = Math.abs(\n    viewport.width - translatedGameBoardAreaWidth,\n  );\n  const horizontalPadding = Math.abs(nonPlayableHorizontalArea / 2);\n\n  const nonPlayableVerticalArea = Math.abs(\n    viewport.height - translatedGameBoardAreaHeight,\n  );\n  const verticalPadding = Math.abs(nonPlayableVerticalArea / 2);\n  const verticalBottomPadding =\n    (containedRect.y +\n      containedRect.height -\n      (gameBoardRect.y + gameBoardRect.height)) *\n    newScale;\n\n  let x: number;\n  let y: number;\n\n  if (viewport.height >= translatedGameBoardAreaHeight) {\n    y = -translatedGameBoardAreaY + verticalPadding;\n    if (verticalPadding > verticalBottomPadding) {\n      y += verticalPadding - verticalBottomPadding;\n    }\n  } else {\n    y = -translatedGameBoardAreaY - verticalPadding;\n  }\n\n  if (viewport.width >= translatedGameBoardAreaWidth) {\n    x = -translatedGameBoardAreaX + horizontalPadding;\n  } else {\n    x = -translatedGameBoardAreaX - horizontalPadding;\n  }\n\n  return {\n    scale: newScale,\n    x,\n    y,\n  };\n}\n"],"names":["className","height","width","fill","style","opacity","province","x","y","theme","useTheme","id","viewBox","xmlns","d","stroke","palette","primary","main","WDLabel","text","fontWeight","fontSize","userSelect","defaultProps","undefined","ArrowType","provinceMapData","ownerCountryID","playerCountryID","highlightSelection","dispatch","useAppDispatch","useAppSelector","gameOverview","members","user","territoryFill","territoryFillOpacity","ownerCountry","find","m","countryID","Number","country","type","playerCountry","onClick","e","evt","gameApiSliceActions","clickProvince","texture","path","strokeOpacity","strokeWidth","fillOpacity","centerPos","labels","map","i","name","txt","abbr","overflow","children","units","unitFCs","unitFCsDislodging","filter","unit","mappedTerritory","forEach","unitState","drawMode","UnitDrawMode","UIState","wdUnit","WDUnit","meta","iconState","unitSlotName","unitSlots","arrowReceiver","unitName","centersByProvince","phase","isLivePhase","gameDataResponse","gameData","maps","gameMaps","provinceStatusByProvID","data","territoryStatuses","provinceStatus","terrIDToProvince","curOrder","gameOrder","legalOrders","gameLegalOrders","overview","provincesToHighlight","provincesToChoose","inProgress","viaConvoy","unitToTerrID","unitID","legalViasByUnitID","via","TerritoryMap","dest","legalMoveDestsByUnitID","territory","fromTerrID","legalSupportsByUnitID","support","Object","keys","legalConvoysByUnitID","legalRetreatDestsByUnitID","push","member","supplyCenterNo","unitNo","possibleBuildDests","provincesToHighlightSet","Set","provincesToChooseSet","unplayableProvinces","values","provincesMapData","playable","playableProvincesData","Province","playableProvinces","has","playableProvinceBorderHighlights","playableProvinceOverlays","BuildUnit","WDArrowMarkerColors","arrowType","entries","webDiplomacyTheme","arrowColor","config","ArrowColor","markerWidth","markerHeight","refX","refY","orient","points","markerUnits","Army","Fleet","availableOrder","clickCallback","canBuild","toTerrID","svgX","unitSlotsBySlotName","svgY","rw","buildButtons","iconStyle","groupStyle","cursor","cx","iconX","r","cy","WDArmyIcon","shift","length","WDFleetIcon","rx","ry","order","userMember","state","game","Box","terrIDToTerritory","orderID","terrIDToBuildOn","BuildUnitMap","terrIDToProvinceID","saved","update","countryMap","position","clickHandler","unitX","unitY","shiftX","shiftY","Error","rh","textAnchor","alignmentBaseline","fontFamily","u","mTerr","unitToTerritory","orderType","hasAnyLegalConvoysByUnitID","getTargetXYWH","identifier","arrowX1","arrowY1","toTerritoryName","Territory","toTerritoryData","UNIT_WIDTH","UNIT_HEIGHT","getArrowX1Y1X2Y2","sourceType","sourceIdentifier","receiverType","receiverIdentifier","sx1","sy1","sourceWidth","sourceHeight","rx2","ry2","receiverWidth","unitH","unitW","x1","x2","y1","y2","xDiff","yDiff","Math","abs","theta","atan2","x1New","cos","y1New","sin","x2New","y2New","arrowDispatchReceiveCoordinates","drawArrowFunctional","strokeDasharray","offsetArrowSourcePixels","dx","dy","sqrt","dxunit","dyunit","dyunitRotated","markerEnd","getProvIDNumberOfTerrIDNumber","terrID","territories","coastParentID","orders","standoffs","arrows","ordersByProvID","ghostArrowsAlreadyAdded","fromTerr","toTerr","success","accumulateMoveOrderArrows","supporterProvIDToSupporteeProvID","provID","supporteeProvID","supporterProvID","supporterTerr","supporteeOrder","supporteeTerr","accumulateSupportHoldOrderArrows","isCoordinated","toString","ghostArrowID","add","accumulateSupportMoveOrderArrows","convoyerTerr","convoyeeTerr","convoyeeOrder","accumulateConvoyOrderArrows","accumulateRetreatArrows","movedFromTerrID","accumulateDislodgerArrows","terr","w","h","accumulateBuildCircles","MARKSIZE","accumulateDisbandMarks","standoff","rootTerritory","attemptedMoves","src","dst","accumulateStandoffMarks","WDMap","React","ref","patternUnits","href","CapturableLandTexture","WaterTexture","WDArrowMarkerDefs","patternTransform","operator","radius","in","result","stdDeviation","floodColor","in2","Scales","DESKTOP","MOBILE_LG","MOBILE_LG_LANDSCAPE","MOBILE","MOBILE_LANDSCAPE","TABLET","TABLET_LANDSCAPE","svgElement","useViewport","viewport","ordersMeta","gameOrdersMeta","device","getInitialScaleForDevice","getDevice","scaleMin","scaleMax","current","fullMap","d3","contained","select","containedRect","gameBoardRect","scale","newScale","containedHeight","translatedGameBoardAreaHeight","translatedGameBoardAreaY","translatedGameBoardAreaWidth","translatedGameBoardAreaX","nonPlayableHorizontalArea","horizontalPadding","nonPlayableVerticalArea","verticalPadding","verticalBottomPadding","getInitialViewTranslation","node","getBBox","d3Zoom","translateExtent","scaleExtent","clickDistance","on","transform","attr","preventDefault","call","setTimeout","keydownHandler","which","keyCode","window","addEventListener","removeEventListener"],"sourceRoot":""}